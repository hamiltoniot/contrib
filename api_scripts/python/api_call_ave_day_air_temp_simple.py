# --------------------------------------------------------------------------------------------------
#
# This script file is a simple play around with the Hamilton API from a Python perspective. This
# script more specifically fetches air temperature for a day from a sensor, and then works out the
# average air temperature for the day.
#
# Note: This script is directly modified from "api_call_basic.py"
#
# Note: This example assumes the use of a day's readings, however this example can be used for any
#       length of time.
#
# Tested On: Python 2.7.X (Ubuntu 16.04, Windows 10 (Version 1709, Build 16299.192))
# Libraries: requests, numpy
#
# Created by: Alan Herbert (hamilton@eskerfall.com)
#
# --------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------
# Script
# --------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------
# Imports

import requests
import numpy



# --------------------------------------------------------------------------------------------------
# Request data used

api_type = "api"

d_sensor = ""                           # for example: "01072D"

d_from   = ""                           # start time of data to be fetched.
d_to     = ""                           # end time of data to be fetched (this also works in unix
                                        # seconds, but this code sticks to RFC 3339).
                                        # for example with time zone: 
                                        # d_from = "2018-01-14T01:00:00-02:00"
                                        # d_to   = "2018-01-15T01:00:00-02:00"
                                        
d_millis = "true"                       # returns times in milliseconds, setting to false returns
                                        # time in nanoseconds (javascript sometimes battles with 
                                        # this accuracy).
                                        # this has been set to "true" as a default value.
                                        
d_rollup = "5m"                         # sensor data placed into 5 minute buckets.
                                        # this has been set to "5m" as a default value.

d_limit  = "1000"                       # limit number of data points to respond with in a request.
                                        # this has been set to "1000" as a default value.

d_header = "application/json"           # required header information.
d_auth   = ""                           # auth key required in header too.
                                        # this can be obtained from the "API Access" tab on the 
                                        # Hamilton website after login found at: 
                                        # https://cloud.hamiltoniot.com/api
                                        # simply copy paste your API key into the d_auth variable as
                                        # as a string.



# --------------------------------------------------------------------------------------------------
# Perform the request and access the data returned

req = requests.get("https://" + api_type + ".hamiltoniot.com/v1/data/rollup/" + d_sensor, 
                   params = {"from": d_from, "to": d_to, "millis": d_millis, "rollup": d_rollup},
                   headers = {"accept": d_header, "Authorization": d_auth})

print "URL generated by request:\n" + req.url + "\n"

res_json = req.json()               # get the JSON response out of the response



# --------------------------------------------------------------------------------------------------
# now we access the air temperature data and average it out for the day

# access the data as pointed out in "api_call_basic.py"
print "All air temperature means from the selected device:\n" + \
      str(res_json[u'results'][u'air_temp'][u'means']) + "\n"

# so a very important note here is that each roundup here consists of a single sensor reading. This
# means that we do not need to do any kind of preprocessing on our data before calculation of the
# average air temperature for the day.
print "All counts for air temperature during roundup:\n" + \
      str(res_json[u'results'][u'air_temp'][u'counts']) + "\n"
      
# as all sensor data is returned as integers, we can manipulate them without coversion. here we use
# the numpy library to calculate the average (mean) of the data set for us.
ave_air_temp = numpy.mean(res_json[u'results'][u'air_temp'][u'means'])
print "Average air temp for the day is: " + str(ave_air_temp)


